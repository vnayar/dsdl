module map;

import std.stdio;
import std.conv;
import std.xml;

import derelict.sdl.sdl;

version(unittest) {
  import derelict.sdl.sdl;
  import derelict.sdl.image;
  import derelict.util.compat;
}

import constants, tile, surface;


class Map {
  //private SDL_Surface* _surfTileset;
  //private Tile[] _tileList;

  private TileSet _tileSet;

  TileSet getTileSet() {
    return _tileSet;
  }

  void setTileSet(TileSet tileSet) {
    _tileSet = tileSet;
  }

  //void setTileset(SDL_Surface* surfTileset) {
  //  _surfTileset = surfTileset;
  //}

  /*
  bool onLoad(string fileName) {
    // Clear out any old tiles.
    _tileList.length = 0;

    auto f = File(fileName, "r");
    foreach (y; 0 .. MAP_HEIGHT) {
      foreach (x; 0 .. MAP_WIDTH) {
        Tile tempTile = new Tile();
        int id, type;
        //f.readf(" %d:%d ", &(tempTile.id), &(tempTile.type));
        f.readf(" %d:%d ", &id, &type);
        tempTile.id = id;
        tempTile.type = cast(Tile.Type) type;
        _tileList ~= tempTile;
      }
      //f.readf("\n");
    }
    return true;
  }
  */

  /**
   * Load a map from a TMX file in XML format.
   * The file format is that generated by the program 'tiled'.
   *
   * See http://www.mapeditor.org
   */
  bool loadFromTmxFile(string fileName) {
    string xmlData = cast(string)std.file.read(fileName);
    _tileSet = loadFromTmx(xmlData);
    return true;
  }

  TileSet loadFromTmx(string xmlData) {
    TileSet tileSet = new TileSet();
    string tileSetImageName;

    // Check for XML syntax compliance.
    check(xmlData);

    writeln("Testing with data:\n", xmlData);
    auto xml = new DocumentParser(xmlData);

    xml.onText = (string txt) {
      writeln("Found Text: ", txt);
    };

    //writeln("onStart: ", xml.tag.name);
    xml.onStartTag["tileset"] = (ElementParser xml) {
      writeln("onStart: tileset");
      // Read out image information.
      xml.onEndTag["image"] = (in Element e) {
        tileSetImageName = e.tag.attr["source"];
      };
      // Read all tiles.
      xml.onStartTag["tile"] = (ElementParser xml) {
        writeln("onStart: tile");
        Tile tile = new Tile();
        tile.id = to!int(xml.tag.attr["id"]);

        // Skip to the property we want.
        xml.onStartTag["property"] = (ElementParser xml) {
          if ("name" in xml.tag.attr && xml.tag.attr["name"] == "type" &&
              "value" in xml.tag.attr) {
            tile.type = cast(Tile.Type) to!int(xml.tag.attr["value"]);
          }
        };
        xml.parse();

        tileSet.tiles ~= tile;
      };
      xml.parse();
    };

    // TODO: Insert parsing logic for layer.

    writeln("Starting parse.");
    xml.parse();

    if (tileSetImageName.length == 0)
      return null;

    writeln("Loading image: ", tileSetImageName);
    tileSet.surface = Surface.onLoad(tileSetImageName);

    return tileSet;
  }
  unittest {
    string testXmlData = q"EOF
<?xml version="1.0" encoding="UTF-8"?>
<map version="1.0" orientation="orthogonal" width="40" height="40" tilewidth="16" tileheight="16">
 <tileset firstgid="1" name="DemoTileSet" tilewidth="16" tileheight="16">
  <image source="./tileset/1.png" width="64" height="48"/>
  <tile id="0">
   <properties>
    <property name="type" value="1"/>
   </properties>
  </tile>
  <tile id="1">
   <properties>
    <property name="type" value="1"/>
   </properties>
  </tile>
 </tileset>
</map>
EOF";

    DerelictSDL.load();
    DerelictSDLImage.load();

    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
      throw new Exception("Couldn't init SDL: " ~ toDString(SDL_GetError()));
    }

    Map map = new Map();
    TileSet tileSet = map.loadFromTmx(testXmlData);
  
    assert(tileSet !is null, "Returned null value.");
    assert(tileSet.tiles.length == 2, "Incorrect 'tiles.length'.");
    assert(tileSet.tiles[0].id == 0);
    assert(tileSet.tiles[1].type == Tile.Type.NORMAL, "Incorrect type " ~ to!string(tileSet.tiles[1].type));

    SDL_Quit();
  }

  /*
  void onRender(SDL_Surface* surfDisplay, int mapX, int mapY) {
    if (_surfTileset == null) return;

    int tilesetWidth = _surfTileset.w / TILE_SIZE;
    int tilesetHeight = _surfTileset.h / TILE_SIZE;

    int id = 0;
    
    foreach (y; 0 .. MAP_HEIGHT) {
      foreach (x; 0 .. MAP_WIDTH) {
        if (_tileList[id].type == Tile.Type.NONE) {
          id++;
          continue;
        }

        int tX = mapX + (x * TILE_SIZE);
        int tY = mapY + (y * TILE_SIZE);

        int tilesetX = (_tileList[id].id % tilesetWidth) * TILE_SIZE;
        int tilesetY = (_tileList[id].id / tilesetWidth) * TILE_SIZE;

        Surface.onDraw(
          _surfTileset, tilesetX, tilesetY, TILE_SIZE, TILE_SIZE,
          surfDisplay, tX, tY);

        id++;
      }
    }
  }
  */

  /**
   * Gets the tile from coordinates relative to the map.
   */
  /*
  Tile getTile(int x, int y) {
    int id = x / TILE_SIZE + y / TILE_SIZE * MAP_WIDTH;

    if (id < 0 || id > _tileList.length)
      return null;

    return _tileList[id];
  }
  */
}
